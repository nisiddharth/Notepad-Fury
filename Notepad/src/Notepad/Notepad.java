/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Notepad;

import java.awt.*;
import java.awt.datatransfer.*;
import java.io.*;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.UndoManager;

/**
 *
 * @author NSP
 */

public class Notepad extends javax.swing.JFrame {

    /**
     * Creates new form Notepad
     */
    String filename;
    Clipboard clipboard=getToolkit().getSystemClipboard();
    UndoManager editManager=new UndoManager();
    public Notepad() {
        initComponents();
        setTitle("Notepad- Untitled");
        setIcon();
        textArea.getDocument().addUndoableEditListener((UndoableEditEvent e) -> {
            editManager.addEdit(e.getEdit());
            
        });
        
    }
    
        private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("3.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rtClick = new javax.swing.JPopupMenu();
        undoRt = new javax.swing.JMenuItem();
        redoRt = new javax.swing.JMenuItem();
        cutRt = new javax.swing.JMenuItem();
        copyRt = new javax.swing.JMenuItem();
        pasteRt = new javax.swing.JMenuItem();
        deleteRt = new javax.swing.JMenuItem();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        FileM = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        EditM = new javax.swing.JMenu();
        cutMenu = new javax.swing.JMenuItem();
        copyMenu = new javax.swing.JMenuItem();
        pasteMenu = new javax.swing.JMenuItem();
        findMenu = new javax.swing.JMenuItem();
        undoMenu = new javax.swing.JMenuItem();
        redoMenu = new javax.swing.JMenuItem();
        FormatM = new javax.swing.JMenu();
        checkWWMenu = new javax.swing.JCheckBoxMenuItem();
        fontMenu = new javax.swing.JMenuItem();
        HelpM = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenuItem();

        undoRt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoRt.setMnemonic('U');
        undoRt.setText("Undo");
        undoRt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoRtActionPerformed(evt);
            }
        });
        rtClick.add(undoRt);

        redoRt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoRt.setMnemonic('R');
        redoRt.setText("Redo");
        redoRt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoRtActionPerformed(evt);
            }
        });
        rtClick.add(redoRt);

        cutRt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutRt.setMnemonic('t');
        cutRt.setText("Cut");
        cutRt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutRtActionPerformed(evt);
            }
        });
        rtClick.add(cutRt);

        copyRt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyRt.setMnemonic('C');
        copyRt.setText("Copy");
        copyRt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyRtActionPerformed(evt);
            }
        });
        rtClick.add(copyRt);

        pasteRt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteRt.setMnemonic('P');
        pasteRt.setText("Paste");
        pasteRt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteRtActionPerformed(evt);
            }
        });
        rtClick.add(pasteRt);

        deleteRt.setMnemonic('D');
        deleteRt.setText("Delete");
        deleteRt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRtActionPerformed(evt);
            }
        });
        rtClick.add(deleteRt);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Notepad");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(220, 80));

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setToolTipText("");
        textArea.setWrapStyleWord(true);
        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textAreaCaretUpdate(evt);
            }
        });
        textArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textAreaMouseReleased(evt);
            }
        });
        scrollPane.setViewportView(textArea);
        textArea.getAccessibleContext().setAccessibleName("textArea");

        FileM.setMnemonic('F');
        FileM.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenu.setMnemonic('N');
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        FileM.add(newMenu);

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setMnemonic('O');
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        FileM.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setMnemonic('S');
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        FileM.add(saveMenu);

        exitMenu.setMnemonic('E');
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        FileM.add(exitMenu);

        menuBar.add(FileM);

        EditM.setMnemonic('E');
        EditM.setText("Edit");

        cutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenu.setMnemonic('t');
        cutMenu.setText("Cut");
        cutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuActionPerformed(evt);
            }
        });
        EditM.add(cutMenu);

        copyMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenu.setMnemonic('C');
        copyMenu.setText("Copy");
        copyMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuActionPerformed(evt);
            }
        });
        EditM.add(copyMenu);

        pasteMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenu.setMnemonic('P');
        pasteMenu.setText("Paste");
        pasteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuActionPerformed(evt);
            }
        });
        EditM.add(pasteMenu);

        findMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        findMenu.setMnemonic('F');
        findMenu.setText("Find...");
        findMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findMenuActionPerformed(evt);
            }
        });
        EditM.add(findMenu);

        undoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenu.setText("Undo");
        undoMenu.setEnabled(false);
        undoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuActionPerformed(evt);
            }
        });
        EditM.add(undoMenu);

        redoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenu.setText("Redo");
        redoMenu.setEnabled(false);
        redoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuActionPerformed(evt);
            }
        });
        EditM.add(redoMenu);

        menuBar.add(EditM);

        FormatM.setMnemonic('F');
        FormatM.setText("Format");

        checkWWMenu.setMnemonic('W');
        checkWWMenu.setSelected(true);
        checkWWMenu.setText("Word Wrap");
        checkWWMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkWWMenuActionPerformed(evt);
            }
        });
        FormatM.add(checkWWMenu);

        fontMenu.setMnemonic('F');
        fontMenu.setText("Font and Themes...");
        fontMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontMenuActionPerformed(evt);
            }
        });
        FormatM.add(fontMenu);

        menuBar.add(FormatM);

        HelpM.setMnemonic('H');
        HelpM.setText("Help");

        aboutMenu.setMnemonic('A');
        aboutMenu.setText("About");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });
        HelpM.add(aboutMenu);

        helpMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");
        helpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuActionPerformed(evt);
            }
        });
        HelpM.add(helpMenu);

        menuBar.add(HelpM);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1125, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        // TODO add your handling code here:
        textArea.setText("");
        filename="";
        setTitle("Notepad- Untitled");
        
    }//GEN-LAST:event_newMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        // TODO add your handling code here:
        FileDialog fileDialog=new FileDialog(Notepad.this,"Open File...",FileDialog.LOAD);
        fileDialog.setVisible(true);
        if(fileDialog.getFile()!=null)
        {
            filename=fileDialog.getDirectory()+fileDialog.getFile();
            setTitle("Notepad- "+filename);
        }
        
        try{
            try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
                StringBuilder sb=new StringBuilder();
                String line=null;
                while((line=(reader.readLine()))!=null)
                {
                    sb.append(line+"\n");
                    textArea.setText(sb.toString());
                }
            }
        }
        catch(IOException e){
            System.out.println("File NOT Found.");
        }
    }//GEN-LAST:event_openMenuActionPerformed

    private void checkWWMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkWWMenuActionPerformed
        // TODO add your handling code here:
        if(textArea.getLineWrap()==true)
            textArea.setLineWrap(false);
        else
            textArea.setLineWrap(true);
    }//GEN-LAST:event_checkWWMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        // TODO add your handling code here:
        FileDialog fileDialog=new FileDialog(Notepad.this,"Save File...",FileDialog.SAVE);
        fileDialog.setVisible(true);
        if(fileDialog.getFile()!=null){
            filename=fileDialog.getDirectory()+fileDialog.getFile();
            setTitle("Notepad- "+filename);
        }
        try{
            try (FileWriter fileWriter = new FileWriter(filename)) {
                fileWriter.write(textArea.getText());
            }
        }
        catch(IOException e){
            System.out.println("File NOT Found.");
        }
    }//GEN-LAST:event_saveMenuActionPerformed

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuActionPerformed
        // TODO add your handling code here:
        About.main(null);
    }//GEN-LAST:event_aboutMenuActionPerformed

    private void helpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuActionPerformed
        // TODO add your handling code here:
        Help.main(null);
    }//GEN-LAST:event_helpMenuActionPerformed

    private void cutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuActionPerformed
        // TODO add your handling code here:
        String cutstring=textArea.getSelectedText();
        StringSelection cutSelection=new StringSelection(cutstring);
        clipboard.setContents(cutSelection, cutSelection);
        textArea.replaceSelection("");
    }//GEN-LAST:event_cutMenuActionPerformed

    private void pasteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuActionPerformed
        // TODO add your handling code here:
        try {
            Transferable pasteText;
            pasteText = clipboard.getContents(Notepad.this);
            String sel=(String) pasteText.getTransferData(DataFlavor.stringFlavor);
            textArea.replaceSelection(sel);
        } catch (UnsupportedFlavorException | IOException e) {
            System.out.println("Didn't Work");
        }
    }//GEN-LAST:event_pasteMenuActionPerformed

    private void copyMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuActionPerformed
        // TODO add your handling code here:
        String cutstring=textArea.getSelectedText();
        StringSelection copySelection=new StringSelection(cutstring);
        clipboard.setContents(copySelection, copySelection);
    }//GEN-LAST:event_copyMenuActionPerformed

    private void fontMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontMenuActionPerformed
        // TODO add your handling code here:
        Fonta.main(null);
    }//GEN-LAST:event_fontMenuActionPerformed

    private void findMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findMenuActionPerformed
        // TODO add your handling code here:
        Finder.main(null);
    }//GEN-LAST:event_findMenuActionPerformed

    private void undoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuActionPerformed
        // TODO add your handling code here:
        editManager.undo();
    }//GEN-LAST:event_undoMenuActionPerformed

    private void redoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuActionPerformed
        // TODO add your handling code here:
        editManager.redo();
    }//GEN-LAST:event_redoMenuActionPerformed

    private void textAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaMouseReleased
        // TODO add your handling code here:
        if(evt.isPopupTrigger())
        {
            rtClick.show(this, evt.getX(), evt.getY());
            undoRt.setEnabled(editManager.canUndo());
            redoRt.setEnabled(editManager.canRedo());
            undoMenu.setEnabled(editManager.canUndo());
            redoMenu.setEnabled(editManager.canRedo());
            boolean chb=!(textArea.getSelectionEnd()==textArea.getSelectionStart());
                deleteRt.setEnabled(chb);
                copyRt.setEnabled(chb);
                cutRt.setEnabled(chb);
        }
        
    }//GEN-LAST:event_textAreaMouseReleased

    private void pasteRtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteRtActionPerformed
        // TODO add your handling code here:
        try {
            Transferable pasteText;
            pasteText = clipboard.getContents(Notepad.this);
            String sel=(String) pasteText.getTransferData(DataFlavor.stringFlavor);
            textArea.replaceSelection(sel);
        } catch (UnsupportedFlavorException | IOException e) {
            System.out.println("Didn't Work");
        }
    }//GEN-LAST:event_pasteRtActionPerformed

    private void undoRtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoRtActionPerformed
        // TODO add your handling code here:
        editManager.undo();
    }//GEN-LAST:event_undoRtActionPerformed

    private void redoRtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoRtActionPerformed
        // TODO add your handling code here:
        editManager.redo();
    }//GEN-LAST:event_redoRtActionPerformed

    private void deleteRtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRtActionPerformed
        // TODO add your handling code here:
        textArea.replaceSelection("");
    }//GEN-LAST:event_deleteRtActionPerformed

    private void cutRtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutRtActionPerformed
        // TODO add your handling code here:
        String cutstring=textArea.getSelectedText();
        StringSelection cutSelection=new StringSelection(cutstring);
        clipboard.setContents(cutSelection, cutSelection);
        textArea.replaceSelection("");
    }//GEN-LAST:event_cutRtActionPerformed

    private void copyRtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyRtActionPerformed
        // TODO add your handling code here:
        String cutstring=textArea.getSelectedText();
        StringSelection copySelection=new StringSelection(cutstring);
        clipboard.setContents(copySelection, copySelection);
    }//GEN-LAST:event_copyRtActionPerformed

    private void textAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textAreaCaretUpdate
        // TODO add your handling code here:
        undoMenu.setEnabled(editManager.canUndo());
        redoMenu.setEnabled(editManager.canRedo());
    }//GEN-LAST:event_textAreaCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Notepad().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu EditM;
    private javax.swing.JMenu FileM;
    private javax.swing.JMenu FormatM;
    private javax.swing.JMenu HelpM;
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JCheckBoxMenuItem checkWWMenu;
    private javax.swing.JMenuItem copyMenu;
    private javax.swing.JMenuItem copyRt;
    private javax.swing.JMenuItem cutMenu;
    private javax.swing.JMenuItem cutRt;
    private javax.swing.JMenuItem deleteRt;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenuItem findMenu;
    private javax.swing.JMenuItem fontMenu;
    private javax.swing.JMenuItem helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem pasteMenu;
    private javax.swing.JMenuItem pasteRt;
    private javax.swing.JMenuItem redoMenu;
    private javax.swing.JMenuItem redoRt;
    private javax.swing.JPopupMenu rtClick;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JScrollPane scrollPane;
    public static javax.swing.JTextArea textArea;
    private javax.swing.JMenuItem undoMenu;
    private javax.swing.JMenuItem undoRt;
    // End of variables declaration//GEN-END:variables

}
